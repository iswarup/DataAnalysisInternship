# -*- coding: utf-8 -*-
"""Aus_REI_Solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xgKXmc0VHw7zIeGQUTq52R7kHgsWHDqi

# Analysis of Australia's Renewable Energy Index values over time
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

import warnings
warnings.filterwarnings('ignore')

import pandas as pd 
Values = [1,1.113572,1.075245,1.15586,1.143912,1.116324,1.098268,1.175124,1.104041,1.167808,1.180695,1.21909,1.199758,1.249765,1.254061,1.349376,1.452678,1.410458,1.32407,1.248624,1.457981,1.763525,1.766546,2.195194,2.42395,2.243455,2.49369,2.698886,2.987448]

df = pd.Series(Values)

df.describe()

"""Above values give us a numerical descriptive summary of the data.

## EDA

### Scatter Plot
"""

sns.relplot(data=df);

"""The values after the year 20 seem to be increasing exponentially.

### Box and whiskers plot
"""

sns.boxplot(df);

"""We see two values post the right whisker line here.
We can confirm if they are outliers with further analysis.

### KDE plot
"""

sns.displot(data=df,kind='kde');

"""Most of the values are between 0.5 to 2.0

### Histogram
"""

sns.displot(df);

"""This histogram shows the number of values *(count)* across intervals.

## Curve fitting
"""

y = df.values
ymean = np.mean(y)
ymean

x = df.index
xmean = np.mean(x)
xmean

slope = np.sum((x - xmean)*(y-ymean)) / np.sum((x-xmean)**2)
slope

intercept = ymean - slope * xmean
intercept

"""### Line curve

The line equation :-  Y = 0.056 X + 0.73
"""

predictions = slope * x + intercept

# type(predictions)

# np.sqrt(np.sum((predictions-y)**2))

sns.regplot(data=df, x=df.index,y=df.values)
sns.regplot(data=df, x=df.index,y=predictions);

"""### Exponential curve

The equation :-  Y = a (1 + r ) **bX
"""

def exPred(X):
    """ X should be df.index. """
    diff = 0

    for i in range(len(X)):
        if (i+1) != l:
            diff += (df.values[i+1] - df.values[i])
    gr = diff/l  # growth rate

    exPredictions = np.zeros(len(X))
    for i in range(len(X)):
        exPredictions[i] = (1+gr)**(0.55*i)
    
    return exPredictions

exPredictions = exPred(df.index)
exPredictions

sns.lineplot(x=df.index,y=df.values)
sns.lineplot(x=df.index,y=exPredictions)

"""# Moving Averages"""